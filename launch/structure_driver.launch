<?xml version="1.0"?>
<launch>

	<arg name="Record_Bag" 			default="false"/>
	<arg name="Stream_Ros" 			default="false"/>
	<arg name="rviz"                   	default="true" />
	<arg name="use_sim_time"	        default="false"/>
	<arg name="rviz_cfg"          		default="$(find structure_core)/structure_core_rviz_cfg.rviz" />
	<arg name="use_urdf" 			default="true"/>
	<arg name="do_quat" 			default="false"/>
	<arg name="do_pcl" 			default="false"/>
	<arg name="do_rect" 			default="false"/>

	<param if="$(arg use_sim_time)" name="use_sim_time" value="true"/>

	<!-- This can be used if more than one computer is used -->
        <node if="$(arg Stream_Ros)" pkg="rostopic" type="rostopic" name="clock" args="pub -s -r 100 /clock rosgraph_msgs/Clock 'now'"/>

	<rosparam command="load" file="$(find structure_core)/launch/structure_prameters.yaml"/>
	<node pkg="structure_core" type="structure_driver" name="structure_driver" output="screen"/>

  <node name="structure_core" pkg="structure_core" type="auto_exposure_control.py" respawn="true" output="screen"/>
	<!-- For TFs use one time URDF or continuos TFs topics -->
	<group if="$(arg use_urdf)">
	 <param name="robot_description"  textfile="$(find structure_core)/launch/Structure.urdf" />
	<node name="robot_state_publisher" pkg="robot_state_publisher"
	    type="robot_state_publisher" />
	</group>

	<group unless="$(arg use_urdf)">
	 <node pkg ="tf" type="static_transform_publisher" name="pcl2baselink" args="0 0 0 -1.57079632679 0 -1.57079632679 base_link camera_depth_optical_frame 100" />
	 <node pkg ="tf" type="static_transform_publisher" name="imu2baselink" args="0 0 0 0 0 0 base_link imu 10" />
	 <node pkg ="tf" type="static_transform_publisher" name="bl2camera_visible" args="0 0 0 0 1.57079632679 0 base_link camera_visible_optical_frame 100" />
	</group>


	<node pkg="nodelet" type="nodelet" args="manager" name="record_player_manager" output="screen"/>

	<!-- This can be used if quaternions are needed -->
 	<node if="$(arg do_quat)" pkg="imu_complementary_filter" type="complementary_filter_node" name="complementary_filter">
		 <remap from="imu/data_raw" to="imu_node/imu"/>
		 <remap from="imu/data" to="/imu"/>
	</node>

	<!-- This can be used to convert image from uint16 (mm) to float32 (m) -->
	<!--	<node pkg="nodelet" type="nodelet" name="convert" args="load depth_image_proc/convert_metric record_player_manager no-bond" >
		<remap from="image_raw" to="/depth/image"/>
		<remap from="image" to="/depth/image_f32"/>

	</node> -->


	<!-- rectify visible image -->
	<group if="$(arg do_rect)" ns="visible">
	    <node pkg="image_proc" name="image_proc" type="image_proc" output="screen"/>
	</group>

	<!-- create pointcloud from depthmap, output: /points -->
	<node if="$(arg do_pcl)" pkg="nodelet" type="nodelet" name="cloudify_front" args="load depth_image_proc/point_cloud_xyz record_player_manager no-bond" >
		<remap from="image_rect" to="/depth/image"/>
		<remap from="camera_info" to="/depth/camera_info"/>
	</node >

	<!-- This can be used if record is needed -->
	<node if="$(arg Record_Bag)" pkg="rosbag" type="record" name="rosbag_record_diag"
		args="record -o ../catkin_ws/records/ /tf /tf_static
		/left/image_raw /left/camera_info /right/image_raw
		/right/camera_info /imu_node/imu /depth/camera_info
		/depth/image /visible/camera_info /visible/image_rect /clock"  output = "screen"/>


	<!-- Visualization RVIZ -->
	<node if="$(arg rviz)" pkg="rviz" type="rviz" name="rviz" args="-d $(arg rviz_cfg)"/>


	</launch>
